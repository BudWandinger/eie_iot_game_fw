###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         08/Jan/2019  18:36:20
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        -f C:\Users\BUDWAN~1\AppData\Local\Temp\EWCEFD.tmp
#        (\\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
#        -D MPGL2 -D MPG2 --preprocess=c
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List
#        -lC
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List
#        -o
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\bsp\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\drivers\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\application\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\libraries\captouch\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.2\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        \\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

\\Mac\Home\Documents\GitHub\Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \        0x0                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp1_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \        0x0                      DS8 4
     61          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          /* Protected functions                                                                                                */
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          
     76          /*--------------------------------------------------------------------------------------------------------------------
     77          Function: UserApp1Initialize
     78          
     79          Description:
     80          Initializes the State Machine and its variables.
     81          
     82          Requires:
     83            -
     84          
     85          Promises:
     86            - 
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void UserApp1Initialize(void)
     89          { 
   \                     UserApp1Initialize: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     90            /* If good initialization, set state to Idle */
     91            if( 1 )
     92            {
     93              UserApp1_StateMachine = UserApp1SM_Idle;
   \        0x2   0x....'....        ADR.W    R0,UserApp1SM_Idle
   \        0x6   0x....             LDR.N    R1,??DataTable1
   \        0x8   0x6008             STR      R0,[R1, #+0]
     94              
     95              LcdClearScreen();
   \        0xA   0x....'....        BL       LcdClearScreen
     96              
     97              u8 bitmap[2][2];
     98              int i;
     99              int j;
    100              for(i = 0; i < 2; i++)
   \        0xE   0x2400             MOVS     R4,#+0
   \                     ??UserApp1Initialize_0: (+1)
   \       0x10   0x2C02             CMP      R4,#+2
   \       0x12   0xDA0C             BGE.N    ??UserApp1Initialize_1
    101              {
    102                for(j = 0; j < 2; j++)
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x0005             MOVS     R5,R0
   \                     ??UserApp1Initialize_2: (+1)
   \       0x18   0x2D02             CMP      R5,#+2
   \       0x1A   0xDA06             BGE.N    ??UserApp1Initialize_3
    103                {
    104                  bitmap[i][j] = 0xFF;
   \       0x1C   0x20FF             MOVS     R0,#+255
   \       0x1E   0x4669             MOV      R1,SP
   \       0x20   0xEB01 0x0144      ADD      R1,R1,R4, LSL #+1
   \       0x24   0x5548             STRB     R0,[R1, R5]
    105                }
   \       0x26   0x1C6D             ADDS     R5,R5,#+1
   \       0x28   0xE7F6             B.N      ??UserApp1Initialize_2
    106              }
   \                     ??UserApp1Initialize_3: (+1)
   \       0x2A   0x1C64             ADDS     R4,R4,#+1
   \       0x2C   0xE7F0             B.N      ??UserApp1Initialize_0
    107              static PixelBlockType bitMapSize =
    108              {
    109                .u16RowStart = 0,
    110                .u16ColumnStart = 0,
    111                .u16RowSize = 16,
    112                .u16ColumnSize = 16
    113              };
    114          
    115              LcdLoadBitmap((u8 const*)bitmap, &bitMapSize);
   \                     ??UserApp1Initialize_1: (+1)
   \       0x2E   0x....             LDR.N    R1,??DataTable1_1
   \       0x30   0x4668             MOV      R0,SP
   \       0x32   0x....'....        BL       LcdLoadBitmap
    116            }
    117            else
    118            {
    119              /* The task isn't properly initialized, so shut it down and don't run */
    120              UserApp1_StateMachine = UserApp1SM_Error;
    121            }
    122          
    123          } /* end UserApp1Initialize() */
   \       0x36   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .data, align 4
   \                     `UserApp1Initialize{1}{2}::bitMapSize`:
   \        0x0   0x0000 0x0000      DC16 0, 0, 16, 16
   \               0x0010 0x001
   \              0            
    124          
    125            
    126          /*----------------------------------------------------------------------------------------------------------------------
    127          Function UserApp1RunActiveState()
    128          
    129          Description:
    130          Selects and runs one iteration of the current state in the state machine.
    131          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    132          may take 1ms / n to execute.
    133          
    134          Requires:
    135            - State machine function pointer points at current state
    136          
    137          Promises:
    138            - Calls the function to pointed by the state machine function pointer
    139          */

   \                                 In section .text, align 2, keep-with-next
    140          void UserApp1RunActiveState(void)
    141          {
   \                     UserApp1RunActiveState: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    142            UserApp1_StateMachine();
   \        0x2   0x....             LDR.N    R0,??DataTable1
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4780             BLX      R0
    143          
    144          } /* end UserApp1RunActiveState */
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    145          
    146          
    147          /*--------------------------------------------------------------------------------------------------------------------*/
    148          /* Private functions                                                                                                  */
    149          /*--------------------------------------------------------------------------------------------------------------------*/
    150          
    151          
    152          /**********************************************************************************************************************
    153          State Machine Function Definitions
    154          **********************************************************************************************************************/
    155          
    156          /*-------------------------------------------------------------------------------------------------------------------*/
    157          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    158          static void UserApp1SM_Idle(void)
    159          {
    160          /*  static uint32_t timer = 0;
    161            static u8 bitmap[1][1] = {{0}};
    162            static PixelBlockType bitMapSize =
    163            {
    164              .u16RowStart = 0,
    165              .u16ColumnStart = 0,
    166              .u16RowSize = 1,
    167              .u16ColumnSize = 1
    168            };
    169            
    170            if(timer % 1000 == 0)
    171            {
    172              if(bitmap[1][1] == 1)
    173              {
    174                bitmap[1][1] = 0;
    175              }
    176              else
    177              {
    178                bitmap[1][1] = 1;
    179              }
    180              
    181              LcdLoadBitmap((u8 const*)bitmap, &bitMapSize);
    182            }
    183            
    184            timer++;
    185            */
    186           /* static uint32_t timer = 0;
    187          
    188            if(timer % 1000 == 0)
    189            {
    190              PixelAddressType pixel;
    191              pixel.u16PixelColumnAddress = 0;
    192              pixel.u16PixelRowAddress = 0;
    193              LcdClearPixel(&pixel);
    194            }
    195            else if(timer % 500 == 0)
    196            {
    197              PixelAddressType pixel;
    198              pixel.u16PixelColumnAddress = 0;
    199              pixel.u16PixelRowAddress = 0;
    200              LcdSetPixel(&pixel);
    201            }
    202            timer++;
    203          */
    204          } /* end UserApp1SM_Idle() */
   \                     UserApp1SM_Idle: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     `UserApp1Initialize{1}{2}::bitMapSize`
    205              
    206          
    207          /*-------------------------------------------------------------------------------------------------------------------*/
    208          /* Handle an error */
    209          static void UserApp1SM_Error(void)          
    210          {
    211            
    212          } /* end UserApp1SM_Error() */
    213          
    214          
    215          
    216          /*--------------------------------------------------------------------------------------------------------------------*/
    217          /* End of File                                                                                                        */
    218          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UserApp1Initialize
        16   -> LcdClearScreen
        16   -> LcdLoadBitmap
       8   UserApp1RunActiveState
         8   -- Indirect call
       0   UserApp1SM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  G_u32UserApp1Flags
      56  UserApp1Initialize
      10  UserApp1RunActiveState
       2  UserApp1SM_Idle
       4  UserApp1_StateMachine
       8  bitMapSize

 
  8 bytes in section .bss
  8 bytes in section .data
 76 bytes in section .text
 
 76 bytes of CODE memory
 16 bytes of DATA memory

Errors: none
Warnings: none
