###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         12/Jan/2019  16:11:31
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\bsp\mpgl2-ehdw-02.c
#    Command line =  
#        -f C:\Users\BUDWAN~1\AppData\Local\Temp\EWA614.tmp
#        (Z:\Code\eie_iot_game_fw\firmware_dotmatrix\bsp\mpgl2-ehdw-02.c -D
#        MPGL2 -D MPG2 --preprocess=c
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\Debug\List -lC
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\Debug\List -o
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\ -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\bsp\ -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\drivers\ -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\application\
#        -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\libraries\captouch\
#        -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\
#        -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.2\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\Debug\List\mpgl2-ehdw-02.lst
#    Object file  =  
#        Z:\Code\eie_iot_game_fw\firmware_dotmatrix\iar_7_20_1\Debug\Obj\mpgl2-ehdw-02.o
#
###############################################################################

Z:\Code\eie_iot_game_fw\firmware_dotmatrix\bsp\mpgl2-ehdw-02.c
      1          /***********************************************************************************************************************
      2          File: mpgl2-ehdw-02.c                                                                
      3          
      4          Description:
      5          This file provides core and GPIO functions for the mpgl2-ehdw-02 board.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemTime1ms;                       /* Global system time incremented every ms, max 2^32 (~49 days) */
   \                     G_u32SystemTime1ms:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32SystemTime1s;                        /* Global system time incremented every second, max 2^32 (~136 years) */
   \                     G_u32SystemTime1s:
   \        0x0                      DS8 4
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     22          
     23          extern u32 G_u32DebugFlags;                            /* From debug.c */
     24          
     25          
     26          /***********************************************************************************************************************
     27          Global variable definitions with scope limited to this local application.
     28          Variable names shall start with "Bsp_" and be declared as static.
     29          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     30          static u32 Bsp_u32TimingViolationsCounter = 0;
   \                     Bsp_u32TimingViolationsCounter:
   \        0x0                      DS8 4
     31          
     32          
     33          /***********************************************************************************************************************
     34          Function Definitions
     35          ***********************************************************************************************************************/
     36          
     37          /*--------------------------------------------------------------------------------------------------------------------*/
     38          /* Public Functions */
     39          /*--------------------------------------------------------------------------------------------------------------------*/
     40          
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Protected Functions */
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          
     46          /*----------------------------------------------------------------------------------------------------------------------
     47          Function: ClockSetup
     48          
     49          Description:
     50          Loads all registers required to set up the processor clocks.
     51          
     52          Requires:
     53            - Built-in 32kHz slow clock is active to time out the fast clock startup time
     54          
     55          Promises:
     56            - EFC is set up with proper flash access wait states based on 48MHz system clock
     57            - PMC is set up with proper oscillators and clock sources
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          void ClockSetup(void)
     60          {
     61            /* Activate the peripheral clocks needed for the system */
     62            AT91C_BASE_PMC->PMC_PCER = PMC_PCER_INIT;
   \                     ClockSetup: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable8  ;; 0x27fced73
   \        0x2   0x....             LDR.N    R1,??DataTable8_1  ;; 0x400e0410
   \        0x4   0x6008             STR      R0,[R1, #+0]
     63          
     64            /* Enable the master clock on the PKC0 clock out pin (PA_27_CLOCK_OUT) */
     65            AT91C_BASE_PMC->PMC_PCKR[0] = AT91C_PMC_CSS_SYS_CLK | AT91C_PMC_PRES_CLK;
   \        0x6   0x2004             MOVS     R0,#+4
   \        0x8   0x....             LDR.N    R1,??DataTable8_2  ;; 0x400e0440
   \        0xA   0x6008             STR      R0,[R1, #+0]
     66            AT91C_BASE_PMC->PMC_SCER = AT91C_PMC_PCK0;
   \        0xC   0xF44F 0x7080      MOV      R0,#+256
   \       0x10   0x....             LDR.N    R1,??DataTable8_3  ;; 0x400e0400
   \       0x12   0x6008             STR      R0,[R1, #+0]
     67          
     68            /* Turn on the main oscillator and wait for it to start up */
     69            AT91C_BASE_PMC->PMC_MOR = PMC_MOR_INIT;
   \       0x14   0x....             LDR.N    R2,??DataTable8_4  ;; 0x400e0420
   \       0x16   0x....             LDR.N    R0,??DataTable8_5  ;; 0x37f009
   \       0x18   0x6010             STR      R0,[R2, #+0]
     70            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCXTS) );
   \                     ??ClockSetup_0: (+1)
   \       0x1A   0x....             LDR.N    R1,??DataTable8_6  ;; 0x400e0468
   \       0x1C   0x6808             LDR      R0,[R1, #+0]
   \       0x1E   0x07C0             LSLS     R0,R0,#+31
   \       0x20   0xD5FB             BPL.N    ??ClockSetup_0
     71          
     72            /* Assign main clock as crystal */
     73            AT91C_BASE_PMC->PMC_MOR |= (AT91C_CKGR_MOSCSEL | MOR_KEY);
   \       0x22   0x6813             LDR      R3,[R2, #+0]
   \       0x24   0x....             LDR.N    R0,??DataTable8_7  ;; 0x1370000
   \       0x26   0x4303             ORRS     R3,R0,R3
   \       0x28   0x6013             STR      R3,[R2, #+0]
     74            
     75            /* Initialize PLLA and wait for lock */
     76            AT91C_BASE_PMC->PMC_PLLAR = PMC_PLAAR_INIT;
   \       0x2A   0x....             LDR.N    R0,??DataTable8_8  ;; 0x20073f01
   \       0x2C   0x....             LDR.N    R2,??DataTable8_9  ;; 0x400e0428
   \       0x2E   0x6010             STR      R0,[R2, #+0]
     77            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKA) );
   \                     ??ClockSetup_1: (+1)
   \       0x30   0x6808             LDR      R0,[R1, #+0]
   \       0x32   0x0780             LSLS     R0,R0,#+30
   \       0x34   0xD5FC             BPL.N    ??ClockSetup_1
     78            
     79            /* Set flash wait states to allow 48 MHz system clock (2 wait states required) */
     80            AT91C_BASE_EFC0->EFC_FMR = AT91C_EFC_FWS_2WS;
   \       0x36   0xF44F 0x7000      MOV      R0,#+512
   \       0x3A   0x....             LDR.N    R2,??DataTable8_10  ;; 0x400e0800
   \       0x3C   0x6010             STR      R0,[R2, #+0]
     81          //  AT91C_BASE_EFC1->EFC_FMR = AT91C_EFC_FWS_2WS;
     82          
     83            /* Assign the PLLA as the main system clock with prescaler active using the sequence suggested on pg. 472 */
     84            AT91C_BASE_PMC->PMC_MCKR = PMC_MCKR_INIT;
   \       0x3E   0x....             LDR.N    R0,??DataTable8_11  ;; 0x400e0430
   \       0x40   0xF242 0x0211      MOVW     R2,#+8209
   \       0x44   0x6002             STR      R2,[R0, #+0]
     85            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
   \                     ??ClockSetup_2: (+1)
   \       0x46   0x680A             LDR      R2,[R1, #+0]
   \       0x48   0x0712             LSLS     R2,R2,#+28
   \       0x4A   0xD5FC             BPL.N    ??ClockSetup_2
     86            AT91C_BASE_PMC->PMC_MCKR = PMC_MCKR_PLLA;
   \       0x4C   0xF242 0x0212      MOVW     R2,#+8210
   \       0x50   0x6002             STR      R2,[R0, #+0]
     87            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
   \                     ??ClockSetup_3: (+1)
   \       0x52   0x6808             LDR      R0,[R1, #+0]
   \       0x54   0x0700             LSLS     R0,R0,#+28
   \       0x56   0xD5FC             BPL.N    ??ClockSetup_3
     88          
     89            /* Initialize UTMI for USB usage */
     90            AT91C_BASE_CKGR->CKGR_UCKR |= (AT91C_CKGR_UPLLCOUNT & (3 << 20)) | AT91C_CKGR_UPLLEN;
   \       0x58   0x....             LDR.N    R0,??DataTable8_12  ;; 0x400e041c
   \       0x5A   0x6802             LDR      R2,[R0, #+0]
   \       0x5C   0xF452 0x1244      ORRS     R2,R2,#0x310000
   \       0x60   0x6002             STR      R2,[R0, #+0]
     91            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKU) );
   \                     ??ClockSetup_4: (+1)
   \       0x62   0x6808             LDR      R0,[R1, #+0]
   \       0x64   0x0640             LSLS     R0,R0,#+25
   \       0x66   0xD5FC             BPL.N    ??ClockSetup_4
     92             
     93          } /* end ClockSetup */
   \       0x68   0x4770             BX       LR               ;; return
     94          
     95          
     96          /*----------------------------------------------------------------------------------------------------------------------
     97          Function: SysTickSetup
     98          
     99          Description:
    100          Initializes the 1ms and 1s System Ticks off the core timer.
    101          
    102          Requires:
    103            - NVIC is setup and SysTick handler is installed
    104          
    105          Promises:
    106            - Both system timers are set and the SysTick core peripheral is configured for 1ms intervals
    107          */

   \                                 In section .text, align 2, keep-with-next
    108          void SysTickSetup(void)
    109          {
    110            G_u32SystemTime1ms = 0;      
   \                     SysTickSetup: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x....             LDR.N    R1,??DataTable8_13
   \        0x4   0x6008             STR      R0,[R1, #+0]
    111            G_u32SystemTime1s  = 0;   
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....             LDR.N    R1,??DataTable8_14
   \        0xA   0x6008             STR      R0,[R1, #+0]
    112            
    113            /* Load the SysTick Counter Value */
    114            AT91C_BASE_NVIC->NVIC_STICKRVR   = (u32)SYSTICK_COUNT - 1; /* Check value */
   \        0xC   0xF241 0x706F      MOVW     R0,#+5999
   \       0x10   0x....             LDR.N    R1,??DataTable8_15  ;; 0xe000e014
   \       0x12   0x6008             STR      R0,[R1, #+0]
    115            AT91C_BASE_NVIC->NVIC_STICKCVR   = (0x00);                                                              
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x....             LDR.N    R1,??DataTable8_16  ;; 0xe000e018
   \       0x18   0x6008             STR      R0,[R1, #+0]
    116            AT91C_BASE_NVIC->NVIC_STICKCSR   = SYSTICK_CTRL_INIT;
   \       0x1A   0x2003             MOVS     R0,#+3
   \       0x1C   0x....             LDR.N    R1,??DataTable8_17  ;; 0xe000e010
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    117          
    118          } /* end SysTickSetup() */
   \       0x20   0x4770             BX       LR               ;; return
    119          
    120          
    121          /*----------------------------------------------------------------------------------------------------------------------
    122          Function: SystemSleep
    123          
    124          Description:
    125          Puts the system into sleep mode.  Deep sleep mode is currently disabled, so
    126          maximum processor power savings are not yet realized.  To enable deep sleep,
    127          there are certain considerations for waking up that must be taken care of.
    128          
    129          Requires:
    130            - SysTick is running with interrupt enabled for wake from Sleep LPM
    131            - RTC 1 second alarm running with interrupt for wake from Stop LPM
    132          
    133          Promises:
    134            - Configures processor for maximum sleep while still allowing any required
    135              interrupt to wake it up.
    136          */

   \                                 In section .text, align 2, keep-with-next
    137          void SystemSleep(void)
    138          { 
   \                     SystemSleep: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    139             static u32 u32PreviousSystemTick = 0;
    140             static u8 au8TickWarningMessage[] = "\n\r*** 1ms timing violation: ";   
    141             
    142            /* Check system timing */
    143            if( (G_u32SystemTime1ms - u32PreviousSystemTick) != 1)
   \        0x2   0x....             LDR.N    R4,??DataTable8_18
   \        0x4   0x....             LDR.N    R5,??DataTable8_13
   \        0x6   0x6829             LDR      R1,[R5, #+0]
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x1A09             SUBS     R1,R1,R0
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD014             BEQ.N    ??SystemSleep_0
    144            {
    145              /* Flag, count and optionally display warning */
    146              Bsp_u32TimingViolationsCounter++;
   \       0x10   0x....             LDR.N    R6,??DataTable8_19
   \       0x12   0x6830             LDR      R0,[R6, #+0]
   \       0x14   0x1C40             ADDS     R0,R0,#+1
   \       0x16   0x6030             STR      R0,[R6, #+0]
    147              G_u32SystemFlags |= _SYSTEM_TIME_WARNING;
   \       0x18   0x....             LDR.N    R0,??DataTable8_20
   \       0x1A   0x6801             LDR      R1,[R0, #+0]
   \       0x1C   0xF051 0x0120      ORRS     R1,R1,#0x20
   \       0x20   0x6001             STR      R1,[R0, #+0]
    148              if(G_u32DebugFlags & _DEBUG_TIME_WARNING_ENABLE)
   \       0x22   0x....             LDR.N    R0,??DataTable8_21
   \       0x24   0x7800             LDRB     R0,[R0, #+0]
   \       0x26   0x0780             LSLS     R0,R0,#+30
   \       0x28   0xD507             BPL.N    ??SystemSleep_0
    149              {
    150                DebugPrintf(au8TickWarningMessage);
   \       0x2A   0x....             LDR.N    R0,??DataTable8_22
   \       0x2C   0x....'....        BL       DebugPrintf
    151                DebugPrintNumber(Bsp_u32TimingViolationsCounter);
   \       0x30   0x6830             LDR      R0,[R6, #+0]
   \       0x32   0x....'....        BL       DebugPrintNumber
    152                DebugLineFeed();
   \       0x36   0x....'....        BL       DebugLineFeed
    153              }
    154            }
    155            
    156            u32PreviousSystemTick = G_u32SystemTime1ms;
   \                     ??SystemSleep_0: (+1)
   \       0x3A   0x6828             LDR      R0,[R5, #+0]
   \       0x3C   0x6020             STR      R0,[R4, #+0]
    157             
    158            /* Set the system control register for Sleep (but not Deep Sleep) */
    159             AT91C_BASE_PMC->PMC_FSMR &= ~AT91C_PMC_LPM;
   \       0x3E   0x....             LDR.N    R0,??DataTable8_23  ;; 0x400e0470
   \       0x40   0x6801             LDR      R1,[R0, #+0]
   \       0x42   0xF431 0x1180      BICS     R1,R1,#0x100000
   \       0x46   0x6001             STR      R1,[R0, #+0]
    160             AT91C_BASE_NVIC->NVIC_SCR &= ~AT91C_NVIC_SLEEPDEEP;
   \       0x48   0x....             LDR.N    R0,??DataTable8_24  ;; 0xe000ed10
   \       0x4A   0x6801             LDR      R1,[R0, #+0]
   \       0x4C   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x50   0x6001             STR      R1,[R0, #+0]
    161             
    162             /* Set the sleep flag (cleared only in SysTick ISR */
    163             G_u32SystemFlags |= _SYSTEM_SLEEPING;
   \       0x52   0x....             LDR.N    R0,??DataTable8_20
   \       0x54   0x6801             LDR      R1,[R0, #+0]
   \       0x56   0xF051 0x4180      ORRS     R1,R1,#0x40000000
   \       0x5A   0x6001             STR      R1,[R0, #+0]
    164          
    165            /* Now enter the selected LPM */
    166             while(G_u32SystemFlags & _SYSTEM_SLEEPING)
   \                     ??SystemSleep_1: (+1)
   \       0x5C   0x6801             LDR      R1,[R0, #+0]
   \       0x5E   0x0049             LSLS     R1,R1,#+1
   \       0x60   0xD501             BPL.N    ??SystemSleep_2
    167             {
    168               __WFI();
   \       0x62   0xBF30             WFI      
   \       0x64   0xE7FA             B.N      ??SystemSleep_1
    169             }
    170          
    171            /* Clear the sleep mode status flags */
    172            //AT91C_SC->PCON &= SLEEP_MODE_STATUS_CLEAR;
    173            
    174          } /* end SystemSleep(void) */
   \                     ??SystemSleep_2: (+1)
   \       0x66   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     `SystemSleep::u32PreviousSystemTick`:
   \        0x0                      DS8 4

   \                                 In section .data, align 4
   \                     `SystemSleep::au8TickWarningMessage`:
   \        0x0   0x0A 0x0D          DC8 "\012\015*** 1ms timing violation: "
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x31 0x6D    
   \              0x73 0x20    
   \              0x74 0x69    
   \              0x6D 0x69    
   \              0x6E 0x67    
   \              0x20 0x76    
   \              0x69 0x6F    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    175          
    176          
    177          /*----------------------------------------------------------------------------------------------------------------------
    178          Function: WatchDogSetup
    179          
    180          Description:
    181          Configures the watchdog timer.  The dog runs at 32.768kHz from the slow built-in RC clock source which varies over operating conditions from 30kHz to 60kHz.
    182          Since the main loop time / sleep time should be 1 ms most of the time, choosing a value
    183          of 5 seconds should be plenty to avoid watchdog resets.  
    184          
    185          Note: the processor allows the MR register to be written just once.
    186          
    187          Requires:
    188            - SCLK is active at about 32.768kHz
    189          
    190          Promises:
    191            - Watchdog is set for 5 second timeout but not yet enabled
    192          */

   \                                 In section .text, align 2, keep-with-next
    193          void WatchDogSetup(void)
    194          {
    195            AT91C_BASE_WDTC->WDTC_WDMR = WDT_MR_INIT;
   \                     WatchDogSetup: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable8_25  ;; 0x10018500
   \        0x2   0x....             LDR.N    R1,??DataTable8_26  ;; 0x400e1254
   \        0x4   0x6008             STR      R0,[R1, #+0]
    196            WATCHDOG_BONE();
   \        0x6   0x....             LDR.N    R0,??DataTable8_27  ;; 0xa5000001
   \        0x8   0x....             LDR.N    R1,??DataTable8_28  ;; 0x400e1250
   \        0xA   0x6008             STR      R0,[R1, #+0]
    197           
    198          } /* end WatchDogSetup() */
   \        0xC   0x4770             BX       LR               ;; return
    199          
    200          
    201          /*----------------------------------------------------------------------------------------------------------------------
    202          Function: GpioSetup
    203          
    204          Description
    205          Loads all registers required to set up GPIO on the processor.
    206          
    207          Requires:
    208            - All configurations must match connected hardware.
    209          
    210          Promises:
    211            - All I/O lines are set for their required function and start-state
    212          */

   \                                 In section .text, align 2, keep-with-next
    213          void GpioSetup(void)
    214          {
   \                     GpioSetup: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    215            /* Set all of the pin function registers in port A */
    216            AT91C_BASE_PIOA->PIO_PER    = PIOA_PER_INIT;
   \        0x2   0x....             LDR.N    R0,??DataTable8_29  ;; 0xe42301ff
   \        0x4   0x....             LDR.N    R1,??DataTable8_30  ;; 0x400e0c00
   \        0x6   0x6008             STR      R0,[R1, #+0]
    217            AT91C_BASE_PIOA->PIO_PDR    = PIOA_PDR_INIT;
   \        0x8   0x....             LDR.N    R0,??DataTable8_31  ;; 0x1bdcfe00
   \        0xA   0x....             LDR.N    R1,??DataTable8_32  ;; 0x400e0c04
   \        0xC   0x6008             STR      R0,[R1, #+0]
    218            AT91C_BASE_PIOA->PIO_OER    = PIOA_OER_INIT;
   \        0xE   0x....             LDR.N    R0,??DataTable8_33  ;; 0xbf55d7d5
   \       0x10   0x....             LDR.N    R1,??DataTable8_34  ;; 0x400e0c10
   \       0x12   0x6008             STR      R0,[R1, #+0]
    219            AT91C_BASE_PIOA->PIO_ODR    = PIOA_ODR_INIT;
   \       0x14   0x....             LDR.N    R0,??DataTable8_35  ;; 0x40aa282a
   \       0x16   0x....             LDR.N    R1,??DataTable8_36  ;; 0x400e0c14
   \       0x18   0x6008             STR      R0,[R1, #+0]
    220            AT91C_BASE_PIOA->PIO_IFER   = PIOA_IFER_INIT;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x....             LDR.N    R1,??DataTable8_37  ;; 0x400e0c20
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    221            AT91C_BASE_PIOA->PIO_IFDR   = PIOA_IFDR_INIT;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x....             LDR.N    R1,??DataTable8_38  ;; 0x400e0c24
   \       0x24   0x6008             STR      R0,[R1, #+0]
    222            AT91C_BASE_PIOA->PIO_SODR   = PIOA_SODR_INIT;
   \       0x26   0x....             LDR.N    R0,??DataTable8_39  ;; 0x88010000
   \       0x28   0x....             LDR.N    R1,??DataTable8_40  ;; 0x400e0c30
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    223            AT91C_BASE_PIOA->PIO_CODR   = PIOA_CODR_INIT;
   \       0x2C   0x....             LDR.N    R0,??DataTable8_41  ;; 0x340001d5
   \       0x2E   0x....             LDR.N    R1,??DataTable8_42  ;; 0x400e0c34
   \       0x30   0x6008             STR      R0,[R1, #+0]
    224            AT91C_BASE_PIOA->PIO_MDER   = PIOA_MDER_INIT;
   \       0x32   0xF44F 0x60C0      MOV      R0,#+1536
   \       0x36   0x....             LDR.N    R1,??DataTable8_43  ;; 0x400e0c50
   \       0x38   0x6008             STR      R0,[R1, #+0]
    225            AT91C_BASE_PIOA->PIO_MDDR   = PIOA_MDDR_INIT;
   \       0x3A   0xF47F 0x60C0      MVNS     R0,#+1536
   \       0x3E   0x....             LDR.N    R1,??DataTable8_44  ;; 0x400e0c54
   \       0x40   0x6008             STR      R0,[R1, #+0]
    226            AT91C_BASE_PIOA->PIO_PPUDR  = PIOA_PPUDR_INIT;
   \       0x42   0xF05F 0x30FF      MOVS     R0,#-1
   \       0x46   0x....             LDR.N    R1,??DataTable8_45  ;; 0x400e0c60
   \       0x48   0x6008             STR      R0,[R1, #+0]
    227            AT91C_BASE_PIOA->PIO_PPUER  = PIOA_PPUER_INIT;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x....             LDR.N    R1,??DataTable8_46  ;; 0x400e0c64
   \       0x4E   0x6008             STR      R0,[R1, #+0]
    228            AT91C_BASE_PIOA->PIO_ABSR   = PIOA_ABSR_INIT;
   \       0x50   0xF05F 0x50D8      MOVS     R0,#+452984832
   \       0x54   0x....             LDR.N    R1,??DataTable8_47  ;; 0x400e0c70
   \       0x56   0x6008             STR      R0,[R1, #+0]
    229            AT91C_BASE_PIOA->PIO_SCIFSR = PIOA_SCIFSR_INIT;
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x....             LDR.N    R1,??DataTable8_48  ;; 0x400e0c80
   \       0x5C   0x6008             STR      R0,[R1, #+0]
    230            AT91C_BASE_PIOA->PIO_DIFSR  = PIOA_DIFSR_INIT;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x....             LDR.N    R1,??DataTable8_49  ;; 0x400e0c84
   \       0x62   0x6008             STR      R0,[R1, #+0]
    231            AT91C_BASE_PIOA->PIO_SCDR   = PIOA_SCDR_INIT;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400e0c8c
   \       0x68   0x6008             STR      R0,[R1, #+0]
    232            AT91C_BASE_PIOA->PIO_OWER   = PIOA_OWER_INIT;
   \       0x6A   0x....             LDR.N    R0,??DataTable8_51  ;; 0xb40101ff
   \       0x6C   0x....             LDR.N    R1,??DataTable8_52  ;; 0x400e0ca0
   \       0x6E   0x6008             STR      R0,[R1, #+0]
    233            AT91C_BASE_PIOA->PIO_OWDR   = PIOA_OWDR_INIT;
   \       0x70   0x2000             MOVS     R0,#+0
   \       0x72   0x....             LDR.N    R1,??DataTable8_53  ;; 0x400e0ca4
   \       0x74   0x6008             STR      R0,[R1, #+0]
    234            
    235            /* Configure port B GPIO */
    236            AT91C_BASE_PIOB->PIO_PER    = PIOB_PER_INIT;
   \       0x76   0x....             LDR.N    R0,??DataTable8_54  ;; 0x1bfffe7
   \       0x78   0x....             LDR.N    R1,??DataTable8_55  ;; 0x400e0e00
   \       0x7A   0x6008             STR      R0,[R1, #+0]
    237            AT91C_BASE_PIOB->PIO_PDR    = PIOB_PDR_INIT;
   \       0x7C   0x....             LDR.N    R0,??DataTable8_56  ;; 0x400018
   \       0x7E   0x....             LDR.N    R1,??DataTable8_57  ;; 0x400e0e04
   \       0x80   0x6008             STR      R0,[R1, #+0]
    238            AT91C_BASE_PIOB->PIO_OER    = PIOB_OER_INIT;
   \       0x82   0x....             LDR.N    R1,??DataTable8_58  ;; 0x19ff566
   \       0x84   0x....             LDR.N    R2,??DataTable8_59  ;; 0x400e0e10
   \       0x86   0x6011             STR      R1,[R2, #+0]
    239            AT91C_BASE_PIOB->PIO_ODR    = PIOB_ODR_INIT;
   \       0x88   0x....             LDR.N    R1,??DataTable8_60  ;; 0x400a99
   \       0x8A   0x....             LDR.N    R2,??DataTable8_61  ;; 0x400e0e14
   \       0x8C   0x6011             STR      R1,[R2, #+0]
    240            AT91C_BASE_PIOB->PIO_IFER   = PIOB_IFER_INIT;
   \       0x8E   0x2100             MOVS     R1,#+0
   \       0x90   0x....             LDR.N    R2,??DataTable8_62  ;; 0x400e0e20
   \       0x92   0x6011             STR      R1,[R2, #+0]
    241            AT91C_BASE_PIOB->PIO_IFDR   = PIOB_IFDR_INIT;
   \       0x94   0x2100             MOVS     R1,#+0
   \       0x96   0x....             LDR.N    R2,??DataTable8_63  ;; 0x400e0e24
   \       0x98   0x6011             STR      R1,[R2, #+0]
    242            AT91C_BASE_PIOB->PIO_SODR   = PIOB_SODR_INIT;
   \       0x9A   0x....             LDR.N    R1,??DataTable8_64  ;; 0x1a1d000
   \       0x9C   0x....             LDR.N    R2,??DataTable8_65  ;; 0x400e0e30
   \       0x9E   0x6011             STR      R1,[R2, #+0]
    243            AT91C_BASE_PIOB->PIO_CODR   = PIOB_CODR_INIT;
   \       0xA0   0x....             LDR.N    R1,??DataTable8_66  ;; 0x1e2566
   \       0xA2   0x....             LDR.N    R2,??DataTable8_67  ;; 0x400e0e34
   \       0xA4   0x6011             STR      R1,[R2, #+0]
    244            AT91C_BASE_PIOB->PIO_MDER   = PIOB_MDER_INIT;
   \       0xA6   0x2100             MOVS     R1,#+0
   \       0xA8   0x....             LDR.N    R2,??DataTable8_68  ;; 0x400e0e50
   \       0xAA   0x6011             STR      R1,[R2, #+0]
    245            AT91C_BASE_PIOB->PIO_MDDR   = PIOB_MDDR_INIT;
   \       0xAC   0x....             LDR.N    R1,??DataTable8_69  ;; 0x1dfffff
   \       0xAE   0x....             LDR.N    R2,??DataTable8_70  ;; 0x400e0e54
   \       0xB0   0x6011             STR      R1,[R2, #+0]
    246            AT91C_BASE_PIOB->PIO_PPUDR  = PIOB_PPUDR_INIT;
   \       0xB2   0x....             LDR.N    R2,??DataTable8_71  ;; 0x400e0e60
   \       0xB4   0x6011             STR      R1,[R2, #+0]
    247            AT91C_BASE_PIOB->PIO_PPUER  = PIOB_PPUER_INIT;
   \       0xB6   0xF45F 0x1100      MOVS     R1,#+2097152
   \       0xBA   0x....             LDR.N    R2,??DataTable8_72  ;; 0x400e0e64
   \       0xBC   0x6011             STR      R1,[R2, #+0]
    248            AT91C_BASE_PIOB->PIO_ABSR   = PIOB_ABSR_INIT;
   \       0xBE   0x....             LDR.N    R1,??DataTable8_73  ;; 0x400e0e70
   \       0xC0   0x6008             STR      R0,[R1, #+0]
    249            AT91C_BASE_PIOB->PIO_SCIFSR = PIOB_SCIFSR_INIT;
   \       0xC2   0x2000             MOVS     R0,#+0
   \       0xC4   0x....             LDR.N    R1,??DataTable8_74  ;; 0x400e0e80
   \       0xC6   0x6008             STR      R0,[R1, #+0]
    250            AT91C_BASE_PIOB->PIO_DIFSR  = PIOB_DIFSR_INIT;
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x....             LDR.N    R1,??DataTable8_75  ;; 0x400e0e84
   \       0xCC   0x6008             STR      R0,[R1, #+0]
    251            AT91C_BASE_PIOB->PIO_SCDR   = PIOB_SCDR_INIT;
   \       0xCE   0x2000             MOVS     R0,#+0
   \       0xD0   0x....             LDR.N    R1,??DataTable8_76  ;; 0x400e0e8c
   \       0xD2   0x6008             STR      R0,[R1, #+0]
    252            AT91C_BASE_PIOB->PIO_OWER   = PIOB_OWER_INIT;
   \       0xD4   0x....             LDR.N    R0,??DataTable8_77  ;; 0x1fffe6
   \       0xD6   0x....             LDR.N    R1,??DataTable8_78  ;; 0x400e0ea0
   \       0xD8   0x6008             STR      R0,[R1, #+0]
    253            AT91C_BASE_PIOB->PIO_OWDR   = PIOB_OWDR_INIT;
   \       0xDA   0x2000             MOVS     R0,#+0
   \       0xDC   0x....             LDR.N    R1,??DataTable8_79  ;; 0x400e0ea4
   \       0xDE   0x6008             STR      R0,[R1, #+0]
    254          
    255            /* Configure the initial audio pins */
    256            PWMSetupAudio();
   \       0xE0   0x....'....        BL       PWMSetupAudio
    257            
    258            /* Check for special start-up mode that bypasses ANT for debugging (BUTTON1 pressed) */
    259            if( !(AT91C_BASE_PIOB->PIO_PDSR & PB_00_BUTTON1) )
   \       0xE4   0x....             LDR.N    R0,??DataTable8_80  ;; 0x400e0e3c
   \       0xE6   0x6800             LDR      R0,[R0, #+0]
   \       0xE8   0x07C0             LSLS     R0,R0,#+31
   \       0xEA   0xD404             BMI.N    ??GpioSetup_0
    260            {
    261              G_u32SystemFlags |= _SYSTEM_STARTUP_NO_ANT;
   \       0xEC   0x....             LDR.N    R0,??DataTable8_20
   \       0xEE   0x6801             LDR      R1,[R0, #+0]
   \       0xF0   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \       0xF4   0x6001             STR      R1,[R0, #+0]
    262            }
    263           
    264            
    265          } /* end GpioSetup() */
   \                     ??GpioSetup_0: (+1)
   \       0xF6   0xBD01             POP      {R0,PC}          ;; return
    266          
    267          
    268          /*----------------------------------------------------------------------------
    269          Function: PWMSetupAudio
    270          
    271          Description:
    272          Configures the PWM peripheral for audio operation on H0 and H1 channels.
    273          
    274          Requires:
    275            - Peripheral resources not used for any other function.
    276          
    277          Promises:
    278            - PWM is configured for PWM mode and currently off.
    279          */

   \                                 In section .text, align 2, keep-with-next
    280          void PWMSetupAudio(void)
    281          {
    282            /* Set all intialization values */
    283            AT91C_BASE_PWMC->PWMC_CLK = PWM_CLK_INIT;
   \                     PWMSetupAudio: (+1)
   \        0x0   0xF05F 0x1001      MOVS     R0,#+65537
   \        0x4   0x....             LDR.N    R1,??DataTable8_81  ;; 0x4008c000
   \        0x6   0x6008             STR      R0,[R1, #+0]
    284            AT91C_BASE_PWMC->PWMC_SCM = PWM_SCM_INIT;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....             LDR.N    R1,??DataTable8_82  ;; 0x4008c020
   \        0xC   0x6008             STR      R0,[R1, #+0]
    285            
    286            AT91C_BASE_PWMC_CH0->PWMC_CMR = PWM_CMR0_INIT;
   \        0xE   0x2003             MOVS     R0,#+3
   \       0x10   0x....             LDR.N    R1,??DataTable8_83  ;; 0x4008c200
   \       0x12   0x6008             STR      R0,[R1, #+0]
    287            AT91C_BASE_PWMC_CH0->PWMC_CPRDR    = PWM_CPRD0_INIT; /* Set current frequency */
   \       0x14   0xF241 0x7070      MOVW     R0,#+6000
   \       0x18   0x....             LDR.N    R1,??DataTable8_84  ;; 0x4008c20c
   \       0x1A   0x6008             STR      R0,[R1, #+0]
    288            AT91C_BASE_PWMC_CH0->PWMC_CPRDUPDR = PWM_CPRD0_INIT; /* Latch CPRD values */
   \       0x1C   0x....             LDR.N    R1,??DataTable8_85  ;; 0x4008c210
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    289            AT91C_BASE_PWMC_CH0->PWMC_CDTYR    = PWM_CDTY0_INIT; /* Set 50% duty */
   \       0x20   0xF642 0x60E0      MOVW     R0,#+12000
   \       0x24   0x....             LDR.N    R1,??DataTable8_86  ;; 0x4008c204
   \       0x26   0x6008             STR      R0,[R1, #+0]
    290            AT91C_BASE_PWMC_CH0->PWMC_CDTYUPDR = PWM_CDTY0_INIT; /* Latch CDTY values */
   \       0x28   0x....             LDR.N    R1,??DataTable8_87  ;; 0x4008c208
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    291          
    292          } /* end PWMSetupAudio() */
   \       0x2C   0x4770             BX       LR               ;; return
    293          
    294          
    295          /*----------------------------------------------------------------------------
    296          Function: PWMAudioSetFrequency
    297          
    298          Description:
    299          Configures the PWM peripheral with the desired frequency.
    300          Note, we don't care if we interrupt the current cycle, so the direct registers
    301          are used rather than the double-buffered values.
    302          
    303          Requires:
    304            - u32Channel_ is the channel of interest - either BUZZER1 or BUZZER2 (MPGL1 only)
    305            - u16Frequency_ is in Hertz and should be in the range 100 - 20,000 since
    306              that is the audible range.  Higher and lower frequencies are allowed, though.
    307            - The PWM peripheral is correctly configured for the current processor clock speed.
    308            - CPRE_CLCK is the clock frequency for the PWM peripheral
    309          
    310          Promises:
    311            - The frequency and duty cycle values for the requested channel are calculated
    312              and set to their respective update registers (either set directly or latched for update)
    313            - If the channel is not valid, nothing happens
    314          */

   \                                 In section .text, align 2, keep-with-next
    315          void PWMAudioSetFrequency(u32 u32Channel_, u16 u16Frequency_)
    316          {
   \                     PWMAudioSetFrequency: (+1)
   \        0x0   0xB410             PUSH     {R4}
    317            u32 u32ChannelPeriod;
    318            
    319            u32ChannelPeriod = CPRE_CLCK / u16Frequency_;
   \        0x2   0x....             LDR.N    R2,??DataTable8_88  ;; 0x5b8d80
   \        0x4   0x000B             MOVS     R3,R1
   \        0x6   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \        0x8   0xFBB2 0xF2F3      UDIV     R2,R2,R3
    320            
    321            if(u32Channel_ == BUZZER1)
   \        0xC   0x2801             CMP      R0,#+1
   \        0xE   0xD110             BNE.N    ??PWMAudioSetFrequency_0
    322            {
    323              /* Set different registers depending on if PWM is already running */
    324              if (AT91C_BASE_PWMC->PWMC_SR & AT91C_PWMC_CHID0)
   \       0x10   0x....             LDR.N    R3,??DataTable8_89  ;; 0x4008c00c
   \       0x12   0x681B             LDR      R3,[R3, #+0]
   \       0x14   0x07DB             LSLS     R3,R3,#+31
   \       0x16   0xD506             BPL.N    ??PWMAudioSetFrequency_1
    325              {
    326                /* Beeper is already running, so use update registers */
    327                AT91C_BASE_PWMC_CH0->PWMC_CPRDUPDR = u32ChannelPeriod;   
   \       0x18   0x....             LDR.N    R3,??DataTable8_85  ;; 0x4008c210
   \       0x1A   0x601A             STR      R2,[R3, #+0]
    328                AT91C_BASE_PWMC_CH0->PWMC_CDTYUPDR = u32ChannelPeriod >> 1; 
   \       0x1C   0x0013             MOVS     R3,R2
   \       0x1E   0x085B             LSRS     R3,R3,#+1
   \       0x20   0x....             LDR.N    R4,??DataTable8_87  ;; 0x4008c208
   \       0x22   0x6023             STR      R3,[R4, #+0]
   \       0x24   0xE005             B.N      ??PWMAudioSetFrequency_0
    329              }
    330              else
    331              {
    332                /* Beeper is off, so use direct registers */
    333                AT91C_BASE_PWMC_CH0->PWMC_CPRDR = u32ChannelPeriod;
   \                     ??PWMAudioSetFrequency_1: (+1)
   \       0x26   0x....             LDR.N    R3,??DataTable8_84  ;; 0x4008c20c
   \       0x28   0x601A             STR      R2,[R3, #+0]
    334                AT91C_BASE_PWMC_CH0->PWMC_CDTYR = u32ChannelPeriod >> 1;
   \       0x2A   0x0013             MOVS     R3,R2
   \       0x2C   0x085B             LSRS     R3,R3,#+1
   \       0x2E   0x....             LDR.N    R4,??DataTable8_86  ;; 0x4008c204
   \       0x30   0x6023             STR      R3,[R4, #+0]
    335              }
    336            }
    337              
    338          } /* end PWMAudioSetFrequency() */
   \                     ??PWMAudioSetFrequency_0: (+1)
   \       0x32   0xBC10             POP      {R4}
   \       0x34   0x4770             BX       LR               ;; return
    339          
    340          
    341          /*----------------------------------------------------------------------------
    342          Function: PWMAudioOn
    343          
    344          Description:
    345          Enables a PWM channel.
    346          
    347          Requires:
    348            - All peripheral values should be configured
    349            - u32Channel_ is BUZZER1
    350          
    351          Promises:
    352            - PWM for the selected channel is enabled
    353          */

   \                                 In section .text, align 2, keep-with-next
    354          void PWMAudioOn(u32 u32Channel_)
    355          {
    356            if(u32Channel_ == BUZZER1)
   \                     PWMAudioOn: (+1)
   \        0x0   0x2801             CMP      R0,#+1
   \        0x2   0xD101             BNE.N    ??PWMAudioOn_0
    357            {
    358              /* Enable the channel */
    359              AT91C_BASE_PWMC->PWMC_ENA = u32Channel_;  
   \        0x4   0x....             LDR.N    R1,??DataTable8_90  ;; 0x4008c004
   \        0x6   0x6008             STR      R0,[R1, #+0]
    360            }
    361          
    362          } /* end PWMAudioOn() */
   \                     ??PWMAudioOn_0: (+1)
   \        0x8   0x4770             BX       LR               ;; return
    363          
    364          
    365          /*----------------------------------------------------------------------------
    366          Function: PWMAudioOff
    367          
    368          Description:
    369          Disables a PWM channel.
    370          
    371          Requires:
    372            - u32Channel_ is BUZZER1
    373          
    374          Promises:
    375            - PWM for the selected channel is disabled
    376          */

   \                                 In section .text, align 2, keep-with-next
    377          void PWMAudioOff(u32 u32Channel_)
    378          {
    379            /* Disable the channel */
    380            AT91C_BASE_PWMC->PWMC_DIS = u32Channel_;  
   \                     PWMAudioOff: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable8_91  ;; 0x4008c008
   \        0x2   0x6008             STR      R0,[R1, #+0]
    381          
    382          } /* end PWMAudioOff() */
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x27FC'ED73        DC32     0x27fced73

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x400E'0410        DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x400E'0440        DC32     0x400e0440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x400E'0400        DC32     0x400e0400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x400E'0420        DC32     0x400e0420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x0037'F009        DC32     0x37f009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x400E'0468        DC32     0x400e0468

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x0137'0000        DC32     0x1370000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x2007'3F01        DC32     0x20073f01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \        0x0   0x400E'0428        DC32     0x400e0428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \        0x0   0x400E'0800        DC32     0x400e0800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \        0x0   0x400E'0430        DC32     0x400e0430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \        0x0   0x400E'041C        DC32     0x400e041c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \        0x0   0x....'....        DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \        0x0   0x....'....        DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \        0x0   0xE000'E014        DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \        0x0   0xE000'E018        DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \        0x0   0x....'....        DC32     `SystemSleep::u32PreviousSystemTick`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \        0x0   0x....'....        DC32     Bsp_u32TimingViolationsCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \        0x0   0x....'....        DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \        0x0   0x....'....        DC32     G_u32DebugFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \        0x0   0x....'....        DC32     `SystemSleep::au8TickWarningMessage`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \        0x0   0x400E'0470        DC32     0x400e0470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \        0x0   0xE000'ED10        DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \        0x0   0x1001'8500        DC32     0x10018500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \        0x0   0x400E'1254        DC32     0x400e1254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \        0x0   0xA500'0001        DC32     0xa5000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \        0x0   0x400E'1250        DC32     0x400e1250

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \        0x0   0xE423'01FF        DC32     0xe42301ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \        0x0   0x400E'0C00        DC32     0x400e0c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \        0x0   0x1BDC'FE00        DC32     0x1bdcfe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \        0x0   0x400E'0C04        DC32     0x400e0c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \        0x0   0xBF55'D7D5        DC32     0xbf55d7d5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \        0x0   0x400E'0C10        DC32     0x400e0c10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \        0x0   0x40AA'282A        DC32     0x40aa282a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \        0x0   0x400E'0C14        DC32     0x400e0c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \        0x0   0x400E'0C20        DC32     0x400e0c20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \        0x0   0x400E'0C24        DC32     0x400e0c24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \        0x0   0x8801'0000        DC32     0x88010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \        0x0   0x400E'0C30        DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \        0x0   0x3400'01D5        DC32     0x340001d5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_42:
   \        0x0   0x400E'0C34        DC32     0x400e0c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_43:
   \        0x0   0x400E'0C50        DC32     0x400e0c50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_44:
   \        0x0   0x400E'0C54        DC32     0x400e0c54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_45:
   \        0x0   0x400E'0C60        DC32     0x400e0c60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_46:
   \        0x0   0x400E'0C64        DC32     0x400e0c64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_47:
   \        0x0   0x400E'0C70        DC32     0x400e0c70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_48:
   \        0x0   0x400E'0C80        DC32     0x400e0c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_49:
   \        0x0   0x400E'0C84        DC32     0x400e0c84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_50:
   \        0x0   0x400E'0C8C        DC32     0x400e0c8c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_51:
   \        0x0   0xB401'01FF        DC32     0xb40101ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_52:
   \        0x0   0x400E'0CA0        DC32     0x400e0ca0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_53:
   \        0x0   0x400E'0CA4        DC32     0x400e0ca4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_54:
   \        0x0   0x01BF'FFE7        DC32     0x1bfffe7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_55:
   \        0x0   0x400E'0E00        DC32     0x400e0e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_56:
   \        0x0   0x0040'0018        DC32     0x400018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_57:
   \        0x0   0x400E'0E04        DC32     0x400e0e04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_58:
   \        0x0   0x019F'F566        DC32     0x19ff566

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_59:
   \        0x0   0x400E'0E10        DC32     0x400e0e10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_60:
   \        0x0   0x0040'0A99        DC32     0x400a99

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_61:
   \        0x0   0x400E'0E14        DC32     0x400e0e14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_62:
   \        0x0   0x400E'0E20        DC32     0x400e0e20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_63:
   \        0x0   0x400E'0E24        DC32     0x400e0e24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_64:
   \        0x0   0x01A1'D000        DC32     0x1a1d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_65:
   \        0x0   0x400E'0E30        DC32     0x400e0e30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_66:
   \        0x0   0x001E'2566        DC32     0x1e2566

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_67:
   \        0x0   0x400E'0E34        DC32     0x400e0e34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_68:
   \        0x0   0x400E'0E50        DC32     0x400e0e50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_69:
   \        0x0   0x01DF'FFFF        DC32     0x1dfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_70:
   \        0x0   0x400E'0E54        DC32     0x400e0e54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_71:
   \        0x0   0x400E'0E60        DC32     0x400e0e60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_72:
   \        0x0   0x400E'0E64        DC32     0x400e0e64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_73:
   \        0x0   0x400E'0E70        DC32     0x400e0e70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_74:
   \        0x0   0x400E'0E80        DC32     0x400e0e80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_75:
   \        0x0   0x400E'0E84        DC32     0x400e0e84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_76:
   \        0x0   0x400E'0E8C        DC32     0x400e0e8c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_77:
   \        0x0   0x001F'FFE6        DC32     0x1fffe6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_78:
   \        0x0   0x400E'0EA0        DC32     0x400e0ea0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_79:
   \        0x0   0x400E'0EA4        DC32     0x400e0ea4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_80:
   \        0x0   0x400E'0E3C        DC32     0x400e0e3c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_81:
   \        0x0   0x4008'C000        DC32     0x4008c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_82:
   \        0x0   0x4008'C020        DC32     0x4008c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_83:
   \        0x0   0x4008'C200        DC32     0x4008c200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_84:
   \        0x0   0x4008'C20C        DC32     0x4008c20c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_85:
   \        0x0   0x4008'C210        DC32     0x4008c210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_86:
   \        0x0   0x4008'C204        DC32     0x4008c204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_87:
   \        0x0   0x4008'C208        DC32     0x4008c208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_88:
   \        0x0   0x005B'8D80        DC32     0x5b8d80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_89:
   \        0x0   0x4008'C00C        DC32     0x4008c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_90:
   \        0x0   0x4008'C004        DC32     0x4008c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_91:
   \        0x0   0x4008'C008        DC32     0x4008c008
    383          
    384          
    385          
    386          
    387          /*--------------------------------------------------------------------------------------------------------------------*/
    388          /* End of File */
    389          /*--------------------------------------------------------------------------------------------------------------------*/
    390          
    391          
    392          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ClockSetup
       8   GpioSetup
         8   -> PWMSetupAudio
       0   PWMAudioOff
       0   PWMAudioOn
       4   PWMAudioSetFrequency
       0   PWMSetupAudio
       0   SysTickSetup
      16   SystemSleep
        16   -> DebugLineFeed
        16   -> DebugPrintNumber
        16   -> DebugPrintf
       0   WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_42
       4  ??DataTable8_43
       4  ??DataTable8_44
       4  ??DataTable8_45
       4  ??DataTable8_46
       4  ??DataTable8_47
       4  ??DataTable8_48
       4  ??DataTable8_49
       4  ??DataTable8_5
       4  ??DataTable8_50
       4  ??DataTable8_51
       4  ??DataTable8_52
       4  ??DataTable8_53
       4  ??DataTable8_54
       4  ??DataTable8_55
       4  ??DataTable8_56
       4  ??DataTable8_57
       4  ??DataTable8_58
       4  ??DataTable8_59
       4  ??DataTable8_6
       4  ??DataTable8_60
       4  ??DataTable8_61
       4  ??DataTable8_62
       4  ??DataTable8_63
       4  ??DataTable8_64
       4  ??DataTable8_65
       4  ??DataTable8_66
       4  ??DataTable8_67
       4  ??DataTable8_68
       4  ??DataTable8_69
       4  ??DataTable8_7
       4  ??DataTable8_70
       4  ??DataTable8_71
       4  ??DataTable8_72
       4  ??DataTable8_73
       4  ??DataTable8_74
       4  ??DataTable8_75
       4  ??DataTable8_76
       4  ??DataTable8_77
       4  ??DataTable8_78
       4  ??DataTable8_79
       4  ??DataTable8_8
       4  ??DataTable8_80
       4  ??DataTable8_81
       4  ??DataTable8_82
       4  ??DataTable8_83
       4  ??DataTable8_84
       4  ??DataTable8_85
       4  ??DataTable8_86
       4  ??DataTable8_87
       4  ??DataTable8_88
       4  ??DataTable8_89
       4  ??DataTable8_9
       4  ??DataTable8_90
       4  ??DataTable8_91
       4  Bsp_u32TimingViolationsCounter
     106  ClockSetup
       4  G_u32SystemTime1ms
       4  G_u32SystemTime1s
     248  GpioSetup
       6  PWMAudioOff
      10  PWMAudioOn
      54  PWMAudioSetFrequency
      46  PWMSetupAudio
      34  SysTickSetup
     104  SystemSleep
      14  WatchDogSetup
      32  au8TickWarningMessage
       4  u32PreviousSystemTick

 
  16 bytes in section .bss
  32 bytes in section .data
 990 bytes in section .text
 
 990 bytes of CODE memory
  48 bytes of DATA memory

Errors: none
Warnings: none
